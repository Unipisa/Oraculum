/*
 * Oraculum API
 *
 * API for managing facts using Oraculum.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Oraculum;
using System.Diagnostics.CodeAnalysis;


namespace OraculumApi.Models.BackOffice
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SibyllaConfigDto : SibyllaConf, IEquatable<SibyllaConfigDto>
    {
        [SetsRequiredMembers]
        public SibyllaConfigDto(string id)
        {
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name = "id")]
        [JsonProperty]
        public required string Id { get; set; }

        public static SibyllaConfigDto ToSibyllaConfigDto(SibyllaConf sibyllaConf)
        {
            //TODO:  the constructor with the Id is required until we dont use a db for storing configurations
            SibyllaConfigDto SibyllaConfigDto = new SibyllaConfigDto(sibyllaConf.Title);
            SibyllaConfigDto.BaseSystemPrompt = sibyllaConf.BaseSystemPrompt;
            SibyllaConfigDto.BaseAssistantPrompt = sibyllaConf.BaseAssistantPrompt;
            SibyllaConfigDto.MaxTokens = sibyllaConf.MaxTokens;
            SibyllaConfigDto.Model = sibyllaConf.Model;
            SibyllaConfigDto.Temperature = sibyllaConf.Temperature;
            SibyllaConfigDto.TopP = sibyllaConf.TopP;
            SibyllaConfigDto.FrequencyPenalty = sibyllaConf.FrequencyPenalty;
            SibyllaConfigDto.PresencePenalty = sibyllaConf.PresencePenalty;
            SibyllaConfigDto.FactFilter = sibyllaConf.FactFilter;
            SibyllaConfigDto.CategoryFilter = sibyllaConf.CategoryFilter;
            SibyllaConfigDto.TagFilter = sibyllaConf.TagFilter;
            SibyllaConfigDto.FactMemoryTTL = sibyllaConf.FactMemoryTTL;
            SibyllaConfigDto.MemorySpan = sibyllaConf.MemorySpan;
            SibyllaConfigDto.OutOfScopeTag = sibyllaConf.OutOfScopeTag;
            SibyllaConfigDto.Limit = sibyllaConf.Limit;
            return SibyllaConfigDto;
        }

        public static SibyllaConf FromSibyllaConfigDto(SibyllaConfigDto sibyllaConfigDto)
        {
            SibyllaConf SibyllaConf = new SibyllaConf();
            SibyllaConf.Title = sibyllaConfigDto.Title;
            SibyllaConf.BaseSystemPrompt = sibyllaConfigDto.BaseSystemPrompt;
            SibyllaConf.BaseAssistantPrompt = sibyllaConfigDto.BaseAssistantPrompt;
            SibyllaConf.MaxTokens = sibyllaConfigDto.MaxTokens;
            SibyllaConf.Model = sibyllaConfigDto.Model;
            SibyllaConf.Temperature = sibyllaConfigDto.Temperature;
            SibyllaConf.TopP = sibyllaConfigDto.TopP;
            SibyllaConf.FrequencyPenalty = sibyllaConfigDto.FrequencyPenalty;
            SibyllaConf.PresencePenalty = sibyllaConfigDto.PresencePenalty;
            SibyllaConf.FactFilter = sibyllaConfigDto.FactFilter;
            SibyllaConf.CategoryFilter = sibyllaConfigDto.CategoryFilter;
            SibyllaConf.TagFilter = sibyllaConfigDto.TagFilter;
            SibyllaConf.FactMemoryTTL = sibyllaConfigDto.FactMemoryTTL;
            SibyllaConf.MemorySpan = sibyllaConfigDto.MemorySpan;
            SibyllaConf.OutOfScopeTag = sibyllaConfigDto.OutOfScopeTag;
            SibyllaConf.Limit = sibyllaConfigDto.Limit;
            return SibyllaConf;
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SibyllaConfigDto)obj);
        }

        /// <summary>
        /// Returns true if SibyllaConfigDto instances are equal
        /// </summary>
        /// <param name="other">Instance of SibyllaConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SibyllaConfigDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    BaseSystemPrompt == other.BaseSystemPrompt ||
                    BaseSystemPrompt != null &&
                    BaseSystemPrompt.Equals(other.BaseSystemPrompt)
                ) &&
                (
                    BaseAssistantPrompt == other.BaseAssistantPrompt ||
                    BaseAssistantPrompt != null &&
                    BaseAssistantPrompt.Equals(other.BaseAssistantPrompt)
                ) &&
                (
                    MaxTokens == other.MaxTokens ||
                    MaxTokens != null &&
                    MaxTokens.Equals(other.MaxTokens)
                ) &&
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) &&
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) &&
                (
                    TopP == other.TopP ||
                    TopP != null &&
                    TopP.Equals(other.TopP)
                ) &&
                (
                    FrequencyPenalty == other.FrequencyPenalty ||
                    FrequencyPenalty != null &&
                    FrequencyPenalty.Equals(other.FrequencyPenalty)
                ) &&
                (
                    PresencePenalty == other.PresencePenalty ||
                    PresencePenalty != null &&
                    PresencePenalty.Equals(other.PresencePenalty)
                );

        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (BaseSystemPrompt != null)
                    hashCode = hashCode * 59 + BaseSystemPrompt.GetHashCode();
                if (BaseAssistantPrompt != null)
                    hashCode = hashCode * 59 + BaseAssistantPrompt.GetHashCode();
                if (MaxTokens != null)
                    hashCode = hashCode * 59 + MaxTokens.GetHashCode();
                if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                if (TopP != null)
                    hashCode = hashCode * 59 + TopP.GetHashCode();
                if (FrequencyPenalty != null)
                    hashCode = hashCode * 59 + FrequencyPenalty.GetHashCode();
                if (PresencePenalty != null)
                    hashCode = hashCode * 59 + PresencePenalty.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SibyllaConfigDto left, SibyllaConfigDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SibyllaConfigDto left, SibyllaConfigDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
