/*
 * Oraculum API
 *
 * API for managing facts using Oraculum.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OraculumApi.Models.BackOffice
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SibyllaConfig : IEquatable<SibyllaConfig>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// System prompt for the configuration
        /// </summary>
        /// <value>System prompt for the configuration</value>
        [Required]

        [DataMember(Name = "systemPrompt")]
        public string SystemPrompt { get; set; }

        /// <summary>
        /// Assistant prompt for the configuration
        /// </summary>
        /// <value>Assistant prompt for the configuration</value>
        [Required]

        [DataMember(Name = "assistantPrompt")]
        public string AssistantPrompt { get; set; }

        /// <summary>
        /// Maximum number of tokens
        /// </summary>
        /// <value>Maximum number of tokens</value>

        [DataMember(Name = "maxTokens")]
        public int? MaxTokens { get; set; }

        /// <summary>
        /// Model used
        /// </summary>
        /// <value>Model used</value>

        [DataMember(Name = "model")]
        public string Model { get; set; }

        /// <summary>
        /// Temperature for response generation
        /// </summary>
        /// <value>Temperature for response generation</value>

        [DataMember(Name = "temperature")]
        public float? Temperature { get; set; }

        /// <summary>
        /// Top P value for response generation
        /// </summary>
        /// <value>Top P value for response generation</value>

        [DataMember(Name = "topP")]
        public float? TopP { get; set; }

        /// <summary>
        /// Frequency penalty for response generation
        /// </summary>
        /// <value>Frequency penalty for response generation</value>

        [DataMember(Name = "frequencyPenalty")]
        public float? FrequencyPenalty { get; set; }

        /// <summary>
        /// Presence penalty for response generation
        /// </summary>
        /// <value>Presence penalty for response generation</value>

        [DataMember(Name = "presencePenalty")]
        public float? PresencePenalty { get; set; }

        /// <summary>
        /// Associated file with the configuration
        /// </summary>
        /// <value>Associated file with the configuration</value>

        [DataMember(Name = "file")]
        public string File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SibyllaConfig {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SystemPrompt: ").Append(SystemPrompt).Append("\n");
            sb.Append("  AssistantPrompt: ").Append(AssistantPrompt).Append("\n");
            sb.Append("  MaxTokens: ").Append(MaxTokens).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("  FrequencyPenalty: ").Append(FrequencyPenalty).Append("\n");
            sb.Append("  PresencePenalty: ").Append(PresencePenalty).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SibyllaConfig)obj);
        }

        /// <summary>
        /// Returns true if SibyllaConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of SibyllaConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SibyllaConfig other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    SystemPrompt == other.SystemPrompt ||
                    SystemPrompt != null &&
                    SystemPrompt.Equals(other.SystemPrompt)
                ) &&
                (
                    AssistantPrompt == other.AssistantPrompt ||
                    AssistantPrompt != null &&
                    AssistantPrompt.Equals(other.AssistantPrompt)
                ) &&
                (
                    MaxTokens == other.MaxTokens ||
                    MaxTokens != null &&
                    MaxTokens.Equals(other.MaxTokens)
                ) &&
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) &&
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) &&
                (
                    TopP == other.TopP ||
                    TopP != null &&
                    TopP.Equals(other.TopP)
                ) &&
                (
                    FrequencyPenalty == other.FrequencyPenalty ||
                    FrequencyPenalty != null &&
                    FrequencyPenalty.Equals(other.FrequencyPenalty)
                ) &&
                (
                    PresencePenalty == other.PresencePenalty ||
                    PresencePenalty != null &&
                    PresencePenalty.Equals(other.PresencePenalty)
                ) &&
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (SystemPrompt != null)
                    hashCode = hashCode * 59 + SystemPrompt.GetHashCode();
                if (AssistantPrompt != null)
                    hashCode = hashCode * 59 + AssistantPrompt.GetHashCode();
                if (MaxTokens != null)
                    hashCode = hashCode * 59 + MaxTokens.GetHashCode();
                if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                if (TopP != null)
                    hashCode = hashCode * 59 + TopP.GetHashCode();
                if (FrequencyPenalty != null)
                    hashCode = hashCode * 59 + FrequencyPenalty.GetHashCode();
                if (PresencePenalty != null)
                    hashCode = hashCode * 59 + PresencePenalty.GetHashCode();
                if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SibyllaConfig left, SibyllaConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SibyllaConfig left, SibyllaConfig right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
