/*
 * Oraculum API
 *
 * API for managing facts using Oraculum.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OraculumApi.Models.BackOffice
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Fact : IEquatable<Fact>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Type of the fact
        /// </summary>
        /// <value>Type of the fact</value>
        [Required]

        [DataMember(Name = "factType")]
        public string FactType { get; set; }

        /// <summary>
        /// Category of the fact
        /// </summary>
        /// <value>Category of the fact</value>

        [DataMember(Name = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Tags associated with the fact
        /// </summary>
        /// <value>Tags associated with the fact</value>

        [DataMember(Name = "tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Title of the fact
        /// </summary>
        /// <value>Title of the fact</value>

        [DataMember(Name = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Main content or body of the fact
        /// </summary>
        /// <value>Main content or body of the fact</value>
        [Required]

        [DataMember(Name = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Citation associated with the fact
        /// </summary>
        /// <value>Citation associated with the fact</value>

        [DataMember(Name = "citation")]
        public string Citation { get; set; }

        /// <summary>
        /// Reference for the fact
        /// </summary>
        /// <value>Reference for the fact</value>

        [DataMember(Name = "reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Expiration date of the fact
        /// </summary>
        /// <value>Expiration date of the fact</value>

        [DataMember(Name = "expiration")]
        public DateTime? Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fact {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FactType: ").Append(FactType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Citation: ").Append(Citation).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Fact)obj);
        }

        /// <summary>
        /// Returns true if Fact instances are equal
        /// </summary>
        /// <param name="other">Instance of Fact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fact other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    FactType == other.FactType ||
                    FactType != null &&
                    FactType.Equals(other.FactType)
                ) &&
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) &&
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) &&
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) &&
                (
                    Citation == other.Citation ||
                    Citation != null &&
                    Citation.Equals(other.Citation)
                ) &&
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) &&
                (
                    Expiration == other.Expiration ||
                    Expiration != null &&
                    Expiration.Equals(other.Expiration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (FactType != null)
                    hashCode = hashCode * 59 + FactType.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                if (Citation != null)
                    hashCode = hashCode * 59 + Citation.GetHashCode();
                if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                if (Expiration != null)
                    hashCode = hashCode * 59 + Expiration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Fact left, Fact right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Fact left, Fact right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
